<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fghk的博客</title>
  
  <subtitle>热衷折腾的普通宅男</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-29T11:47:33.065Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fghk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构-2</title>
    <link href="http://example.com/2023/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/"/>
    <id>http://example.com/2023/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/</id>
    <published>2023-01-29T05:51:26.000Z</published>
    <updated>2023-01-29T11:47:33.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="链表" scheme="http://example.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue速通-1</title>
    <link href="http://example.com/2023/01/28/Vue%E9%80%9F%E9%80%9A-1/"/>
    <id>http://example.com/2023/01/28/Vue%E9%80%9F%E9%80%9A-1/</id>
    <published>2023-01-28T10:23:27.000Z</published>
    <updated>2023-01-29T12:55:11.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><h3 id="Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。"><a href="#Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。" class="headerlink" title="Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。"></a>Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。</h3><h3 id="下面是一个基本示例"><a href="#下面是一个基本示例" class="headerlink" title="下面是一个基本示例"></a>下面是一个基本示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面提供了一个按钮，点击按钮会使按钮上数字增加"><a href="#页面提供了一个按钮，点击按钮会使按钮上数字增加" class="headerlink" title="页面提供了一个按钮，点击按钮会使按钮上数字增加"></a>页面提供了一个按钮，点击按钮会使按钮上数字增加</h3><h3 id="Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。"><a href="#Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。" class="headerlink" title="Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。"></a>Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。</h3><h3 id="不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue："><a href="#不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue：" class="headerlink" title="不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue："></a>不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue：</h3><ul><li>无需构建步骤，渐进式增强静态的Html</li><li>在任何页面中作为Web Components嵌入</li><li>单页面应用(SPA)</li><li>全栈&#x2F;服务端渲染(SSR)</li><li>Jamstack&#x2F;静态站点生成(SSG)</li><li>开发桌面端，移动端，WebGL，甚至是终端中的界面</li></ul><h3 id="单文本组件"><a href="#单文本组件" class="headerlink" title="单文本组件"></a>单文本组件</h3><h4 id="Vue可以使用-vue文件，将html-css-javascript封装进一个文件内"><a href="#Vue可以使用-vue文件，将html-css-javascript封装进一个文件内" class="headerlink" title="Vue可以使用.vue文件，将html,css,javascript封装进一个文件内"></a>Vue可以使用.vue文件，将html,css,javascript封装进一个文件内</h4><h4 id="上面的示例可以改为"><a href="#上面的示例可以改为" class="headerlink" title="上面的示例可以改为"></a>上面的示例可以改为</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个Vue项目"><a href="#创建一个Vue项目" class="headerlink" title="创建一个Vue项目"></a>创建一个Vue项目</h2><h3 id="对于Vue来说可以使用Vite来构建项目"><a href="#对于Vue来说可以使用Vite来构建项目" class="headerlink" title="对于Vue来说可以使用Vite来构建项目"></a>对于Vue来说可以使用Vite来构建项目</h3><h3 id="可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目"><a href="#可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目" class="headerlink" title="可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目"></a>可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><h3 id="然后在项目根目录使用下面的命令之一就可以下载项目需要的包"><a href="#然后在项目根目录使用下面的命令之一就可以下载项目需要的包" class="headerlink" title="然后在项目根目录使用下面的命令之一就可以下载项目需要的包"></a>然后在项目根目录使用下面的命令之一就可以下载项目需要的包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><h3 id="然后使用命令启动项目"><a href="#然后使用命令启动项目" class="headerlink" title="然后使用命令启动项目"></a>然后使用命令启动项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h3 id="再之后访问http-localhost-5173-便可以访问到运行的项目"><a href="#再之后访问http-localhost-5173-便可以访问到运行的项目" class="headerlink" title="再之后访问http://localhost:5173/便可以访问到运行的项目"></a>再之后访问<a href="http://localhost:5173/%E4%BE%BF%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E9%A1%B9%E7%9B%AE">http://localhost:5173/便可以访问到运行的项目</a></h3><h2 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h2><h3 id="每个Vue应用都是通过createApp函数创建一个新的应用实例"><a href="#每个Vue应用都是通过createApp函数创建一个新的应用实例" class="headerlink" title="每个Vue应用都是通过createApp函数创建一个新的应用实例"></a>每个Vue应用都是通过createApp函数创建一个新的应用实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">//根组件选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Vue可以使用两种不同的风格来书写代码  </p><ul><li>选项式API<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data() 返回的属性将会成为响应式的状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 并且暴露在 `this` 上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// methods 是一些用来更改状态与触发更新的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 它们可以在模板中作为事件监听器绑定</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 生命周期钩子会在组件生命周期的各个不同阶段被调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 例如这个函数就会在组件挂载完成后被调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;<span class="variable language_">this</span>.count&#125;</span>.`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>组合式API  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 响应式状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 用来修改状态、触发更新的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 生命周期钩子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;count.value&#125;</span>.`</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr></blockquote><h3 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h3><h4 id="传入createApp的对象实际是一个组件，每个应用都需要一个根组件，其他组件将作为其子组件。"><a href="#传入createApp的对象实际是一个组件，每个应用都需要一个根组件，其他组件将作为其子组件。" class="headerlink" title="传入createApp的对象实际是一个组件，每个应用都需要一个根组件，其他组件将作为其子组件。"></a>传入createApp的对象实际是一个组件，每个应用都需要一个根组件，其他组件将作为其子组件。</h4><h4 id="使用单文本组件时，可以从另一个文件引入根组件"><a href="#使用单文本组件时，可以从另一个文件引入根组件" class="headerlink" title="使用单文本组件时，可以从另一个文件引入根组件"></a>使用单文本组件时，可以从另一个文件引入根组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; form <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><h3 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h3><h4 id="应用实例必须在调用了-mount-方法后才会渲染出来。"><a href="#应用实例必须在调用了-mount-方法后才会渲染出来。" class="headerlink" title="应用实例必须在调用了.mount()方法后才会渲染出来。"></a>应用实例必须在调用了<span style="background:#ccc;color:#000">.mount()</span>方法后才会渲染出来。</h4><h4 id="该方法接受一个容器参数，可以是一个实际的DOM元素或一个css选择器字符串"><a href="#该方法接受一个容器参数，可以是一个实际的DOM元素或一个css选择器字符串" class="headerlink" title="该方法接受一个容器参数，可以是一个实际的DOM元素或一个css选择器字符串"></a>该方法接受一个容器参数，可以是一个实际的DOM元素或一个css选择器字符串</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="根组件的内容会被渲染进容器元素内"><a href="#根组件的内容会被渲染进容器元素内" class="headerlink" title="根组件的内容会被渲染进容器元素内"></a>根组件的内容会被渲染进容器元素内</h4><h3 id="根组件模板"><a href="#根组件模板" class="headerlink" title="根组件模板"></a>根组件模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;#app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><h4 id="应用暴露一个-config对象允许我们配置一些应用级选项"><a href="#应用暴露一个-config对象允许我们配置一些应用级选项" class="headerlink" title="应用暴露一个.config对象允许我们配置一些应用级选项"></a>应用暴露一个<span style="background:#ccc;color:#000">.config</span>对象允许我们配置一些应用级选项</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHeader</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 处理错误 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个应用实例"><a href="#多个应用实例" class="headerlink" title="多个应用实例"></a>多个应用实例</h3><h4 id="应用实例不只限于一个"><a href="#应用实例不只限于一个" class="headerlink" title="应用实例不只限于一个"></a>应用实例不只限于一个</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app1 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app1.<span class="title function_">mount</span>(<span class="string">&#x27;#container-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app2 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app2.<span class="title function_">mount</span>(<span class="string">&#x27;#container-2&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="Vue使用一种基于HTML的模板语法，Vue会将模板编译成高度优化的Javascript代码"><a href="#Vue使用一种基于HTML的模板语法，Vue会将模板编译成高度优化的Javascript代码" class="headerlink" title="Vue使用一种基于HTML的模板语法，Vue会将模板编译成高度优化的Javascript代码"></a>Vue使用一种基于HTML的模板语法，Vue会将模板编译成高度优化的Javascript代码</h3><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Msg: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原始html"><a href="#原始html" class="headerlink" title="原始html"></a>原始html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示的结果"><a href="#显示的结果" class="headerlink" title="显示的结果"></a>显示的结果</h4><h5 id="lt-span-style-quot-color-red-quot-gt-This-should-be-red-lt-span-gt"><a href="#lt-span-style-quot-color-red-quot-gt-This-should-be-red-lt-span-gt" class="headerlink" title="&lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;"></a><code>&lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;</code></h5><h5 id="This-should-be-red"><a href="#This-should-be-red" class="headerlink" title="This should be red."></a><span style="color: red">This should be red.</span></h5><h3 id="在插入Html的例子中，我们使用了v-htmlattribute，在Vue中，被称为一个指令。指令由v-作为前缀。"><a href="#在插入Html的例子中，我们使用了v-htmlattribute，在Vue中，被称为一个指令。指令由v-作为前缀。" class="headerlink" title="在插入Html的例子中，我们使用了v-htmlattribute，在Vue中，被称为一个指令。指令由v-作为前缀。"></a>在插入Html的例子中，我们使用了<code>v-html</code>attribute，在Vue中，被称为一个指令。指令由<code>v-</code>作为前缀。</h3><h4 id="v-html在此处所做的就是将span的innerHTML与rawHtml保持同步，span的内容将被替换为rawHtml。"><a href="#v-html在此处所做的就是将span的innerHTML与rawHtml保持同步，span的内容将被替换为rawHtml。" class="headerlink" title="v-html在此处所做的就是将span的innerHTML与rawHtml保持同步，span的内容将被替换为rawHtml。"></a><code>v-html</code>在此处所做的就是将span的innerHTML与rawHtml保持同步，span的内容将被替换为rawHtml。</h4><h3 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h3><h4 id="双大括号不能在HTML-attribute中使用，要响应式绑定attribute，我们可以使用v-bind。"><a href="#双大括号不能在HTML-attribute中使用，要响应式绑定attribute，我们可以使用v-bind。" class="headerlink" title="双大括号不能在HTML attribute中使用，要响应式绑定attribute，我们可以使用v-bind。"></a>双大括号不能在HTML attribute中使用，要响应式绑定attribute，我们可以使用<code>v-bind</code>。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;myId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上方的实例将div的id与myId保持一致，当myId为null或者undefined时，那么该attribute会被移除"><a href="#上方的实例将div的id与myId保持一致，当myId为null或者undefined时，那么该attribute会被移除" class="headerlink" title="上方的实例将div的id与myId保持一致，当myId为null或者undefined时，那么该attribute会被移除"></a>上方的实例将div的id与myId保持一致，当myId为null或者undefined时，那么该attribute会被移除</h4><h4 id="v-bind的简写"><a href="#v-bind的简写" class="headerlink" title="v-bind的简写"></a><code>v-bind</code>的简写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;myId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔attribute"><a href="#布尔attribute" class="headerlink" title="布尔attribute"></a>布尔attribute</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;idButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="isButtonDisabled为true时button含disabled属性，为false时，不含disabled属性。"><a href="#isButtonDisabled为true时button含disabled属性，为false时，不含disabled属性。" class="headerlink" title="isButtonDisabled为true时button含disabled属性，为false时，不含disabled属性。"></a>isButtonDisabled为true时button含disabled属性，为false时，不含disabled属性。</h4><h3 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">objectAttrs</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&#x27;wrapper&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;objectAttrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h3><h4 id="之前的教学中，我们学会了绑定一些简单的属性，但是Vue在所有模板中都支持完整的JavaScript表达式"><a href="#之前的教学中，我们学会了绑定一些简单的属性，但是Vue在所有模板中都支持完整的JavaScript表达式" class="headerlink" title="之前的教学中，我们学会了绑定一些简单的属性，但是Vue在所有模板中都支持完整的JavaScript表达式"></a>之前的教学中，我们学会了绑定一些简单的属性，但是Vue在所有模板中都支持完整的JavaScript表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? ‘<span class="variable constant_">YES</span>’ : <span class="string">&#x27;NO&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; message.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">resverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)&#125;&#125;</span><br><span class="line">&lt;div :id=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="指令Directives"><a href="#指令Directives" class="headerlink" title="指令Directives"></a>指令Directives</h3><h4 id="指令是指带有v-前缀的attribute，Vue提供了许多内置指令，包括上面用过的v-bind和v-html。"><a href="#指令是指带有v-前缀的attribute，Vue提供了许多内置指令，包括上面用过的v-bind和v-html。" class="headerlink" title="指令是指带有v-前缀的attribute，Vue提供了许多内置指令，包括上面用过的v-bind和v-html。"></a>指令是指带有<code>v-</code>前缀的attribute，Vue提供了许多内置指令，包括上面用过的<code>v-bind</code>和<code>v-html</code>。</h4><h4 id="指令的作用是在其对应表达式的值变化时响应式的更新DOM。以v-if举例："><a href="#指令的作用是在其对应表达式的值变化时响应式的更新DOM。以v-if举例：" class="headerlink" title="指令的作用是在其对应表达式的值变化时响应式的更新DOM。以v-if举例："></a>指令的作用是在其对应表达式的值变化时响应式的更新DOM。以<code>v-if</code>举例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上面，v-if会根据seen表达式的值的真假来插入-x2F-移除该-lt-p-gt-元素。"><a href="#上面，v-if会根据seen表达式的值的真假来插入-x2F-移除该-lt-p-gt-元素。" class="headerlink" title="上面，v-if会根据seen表达式的值的真假来插入&#x2F;移除该&lt;p&gt;元素。"></a>上面，<code>v-if</code>会根据seen表达式的值的真假来插入&#x2F;移除该<code>&lt;p&gt;</code>元素。</h4><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="某些指令会需要参数，在指令后面用冒号隔开"><a href="#某些指令会需要参数，在指令后面用冒号隔开" class="headerlink" title="某些指令会需要参数，在指令后面用冒号隔开"></a>某些指令会需要参数，在指令后面用冒号隔开</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上面的例子中属性名会动态添加"><a href="#上面的例子中属性名会动态添加" class="headerlink" title="上面的例子中属性名会动态添加"></a>上面的例子中属性名会动态添加</h4><blockquote><h4 id="动态参数的值应该为字符串或null，为其他值时会出发警告，null为移除该指令"><a href="#动态参数的值应该为字符串或null，为其他值时会出发警告，null为移除该指令" class="headerlink" title="动态参数的值应该为字符串或null，为其他值时会出发警告，null为移除该指令"></a>动态参数的值应该为字符串或null，为其他值时会出发警告，null为移除该指令</h4></blockquote><h3 id="修饰符Modifiers"><a href="#修饰符Modifiers" class="headerlink" title="修饰符Modifiers"></a>修饰符Modifiers</h3><h4 id="修饰符是以-开头的特殊后缀，表明指令以某种特殊的方式被绑定。"><a href="#修饰符是以-开头的特殊后缀，表明指令以某种特殊的方式被绑定。" class="headerlink" title="修饰符是以 . 开头的特殊后缀，表明指令以某种特殊的方式被绑定。"></a>修饰符是以 . 开头的特殊后缀，表明指令以某种特殊的方式被绑定。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="现在不对修饰符做过多的讨论，在讲v-on和v-model时，会做更详细的讲解。"><a href="#现在不对修饰符做过多的讨论，在讲v-on和v-model时，会做更详细的讲解。" class="headerlink" title="现在不对修饰符做过多的讨论，在讲v-on和v-model时，会做更详细的讲解。"></a>现在不对修饰符做过多的讨论，在讲<code>v-on</code>和<code>v-model</code>时，会做更详细的讲解。</h4></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识Vue&quot;&gt;&lt;a href=&quot;#初识Vue&quot; class=&quot;headerlink&quot; title=&quot;初识Vue&quot;&gt;&lt;/a&gt;初识Vue&lt;/h2&gt;&lt;h3 id=&quot;Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vite" scheme="http://example.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>数据结构_1</title>
    <link href="http://example.com/2023/01/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"/>
    <id>http://example.com/2023/01/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</id>
    <published>2023-01-27T07:02:51.000Z</published>
    <updated>2023-01-27T13:21:58.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h5 id="数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据"><a href="#数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据" class="headerlink" title="数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据"></a>数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据</h5><ul><li><h5 id="线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向"><a href="#线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向" class="headerlink" title="线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向"></a>线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向</h5></li><li><h5 id="连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦"><a href="#连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦" class="headerlink" title="连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦"></a>连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦</h5></li></ul><h3 id="首先写出数据结构的基础类"><a href="#首先写出数据结构的基础类" class="headerlink" title="首先写出数据结构的基础类"></a>首先写出数据结构的基础类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FghkArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 当前使用了的容量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 存储的数据</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[];</span><br><span class="line">  <span class="comment">// FghkArray构造函数，传入参数为长度或传入数组</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">params?: <span class="built_in">number</span> | T[]</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = params;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = params.<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(params ?? <span class="number">10</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成几个基础方法的编写"><a href="#完成几个基础方法的编写" class="headerlink" title="完成几个基础方法的编写"></a>完成几个基础方法的编写</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组中的元素个数</span></span><br><span class="line"><span class="title function_">getSize</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取数组容量</span></span><br><span class="line"><span class="title function_">getCapacity</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="title function_">isEmpty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素方法编写"><a href="#插入元素方法编写" class="headerlink" title="插入元素方法编写"></a>插入元素方法编写</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在index位置插入一个元素e</span></span><br><span class="line"><span class="title function_">add</span>(<span class="params">index: <span class="built_in">number</span>, e: T</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;添加元素错误，index范围出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩容</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[i+<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[index] = e;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中需要考量的是对于数组已满时，需要对数组扩容<br>所以我们在类中写一个重新分配大小的函数  </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resize重新分配空间大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">resize</span>(<span class="attr">newCapacity</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">newData</span>: T[]= <span class="keyword">new</span> <span class="title class_">Array</span>(newCapacity);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++)&#123;</span><br><span class="line">    newData[i] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="然后利用之前写好的add函数，添加一些其他的基础函数"><a href="#然后利用之前写好的add函数，添加一些其他的基础函数" class="headerlink" title="然后利用之前写好的add函数，添加一些其他的基础函数"></a>然后利用之前写好的add函数，添加一些其他的基础函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想数组头添加元素，返回长度</span></span><br><span class="line"><span class="title function_">unshift</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">add</span>(<span class="number">0</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getSize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向末尾添加一个元素</span></span><br><span class="line"><span class="title function_">push</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">size</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getSize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接下来我们写删除数组元素"><a href="#接下来我们写删除数组元素" class="headerlink" title="接下来我们写删除数组元素"></a>接下来我们写删除数组元素</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除index位置的元素，返回删除的元素</span></span><br><span class="line"><span class="title function_">remove</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;删除错误，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: T = <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = index + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[i-<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>--;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩容</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当前大小只有总容量的四分之一，且总容量的二分之一不为0时缩小数组一半容量</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="和之前插入元素一样，基于remove函数添加一些其他函数"><a href="#和之前插入元素一样，基于remove函数添加一些其他函数" class="headerlink" title="和之前插入元素一样，基于remove函数添加一些其他函数"></a>和之前插入元素一样，基于remove函数添加一些其他函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除元素e</span></span><br><span class="line"><span class="title function_">removeElement</span>(<span class="attr">e</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(e);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">remove</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素，返回元素值</span></span><br><span class="line"><span class="title function_">shift</span>(): T&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个元素，返回元素值</span></span><br><span class="line"><span class="title function_">pop</span>(): T&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一些对数组进行查询的方法"><a href="#编写一些对数组进行查询的方法" class="headerlink" title="编写一些对数组进行查询的方法"></a>编写一些对数组进行查询的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找是否有元素e</span></span><br><span class="line"><span class="title function_">contains</span>(<span class="attr">e</span>: T): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isEqual</span>(<span class="variable language_">this</span>.<span class="property">data</span>[i], e)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给定元素e在数组中的第一个索引，不存在返回-1</span></span><br><span class="line"><span class="title function_">indexOf</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isEqual</span>(<span class="variable language_">this</span>.<span class="property">data</span>[i], e)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取index位置的元素</span></span><br><span class="line"><span class="title function_">get</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;获取元素出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFirst</span>(): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getLast</span>(): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一些对数组元素进行更改的方法"><a href="#编写一些对数组元素进行更改的方法" class="headerlink" title="编写一些对数组元素进行更改的方法"></a>编写一些对数组元素进行更改的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置索引处元素为e</span></span><br><span class="line"><span class="title function_">set</span>(<span class="attr">index</span>: <span class="built_in">number</span>, <span class="attr">e</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;设置元素出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[index] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="title function_">swap</span>(<span class="attr">i</span>: <span class="built_in">number</span>, <span class="attr">j</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; <span class="variable language_">this</span>.<span class="property">size</span> || j &lt; <span class="number">0</span> || j &gt; <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;交换出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">tmp</span>: T = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[i] = <span class="variable language_">this</span>.<span class="property">data</span>[j];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写将数组内元素组合成字符串返回的方法"><a href="#编写将数组内元素组合成字符串返回的方法" class="headerlink" title="编写将数组内元素组合成字符串返回的方法"></a>编写将数组内元素组合成字符串返回的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line"><span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>: <span class="built_in">string</span> = <span class="string">`\nFghkArray: size=<span class="subst">$&#123;<span class="variable language_">this</span>.size&#125;</span>, capacity=<span class="subst">$&#123;<span class="variable language_">this</span>.data.length&#125;</span>`</span>;</span><br><span class="line">  res += <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    res += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.data[i]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span>(i !== <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      res += <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h5 id=&quot;数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据&quot;&gt;&lt;a href=&quot;#数组是一种线性的数据结构，利用一组连续的空</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>微积分_1</title>
    <link href="http://example.com/2023/01/26/%E5%BE%AE%E7%A7%AF%E5%88%86-1/"/>
    <id>http://example.com/2023/01/26/%E5%BE%AE%E7%A7%AF%E5%88%86-1/</id>
    <published>2023-01-26T13:37:10.000Z</published>
    <updated>2023-01-29T05:48:34.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNITI-1-微分"><a href="#UNITI-1-微分" class="headerlink" title="UNITI_1 微分"></a>UNITI_1 微分</h1><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><ul><li><h3 id="几何角度"><a href="#几何角度" class="headerlink" title="几何角度"></a>几何角度</h3></li></ul><p>某曲线函数上一点P，坐标为$(x_0,y_0)$<br>$x_0$沿x轴移动距离$\Delta x$，其对应点为Q<br>定义割线为过点P到点Q的直线<br>随着点Q逐渐趋近于点P，割线将逐渐趋近于点P的切线<br>导数的几何意义为切线的斜率，即两点逼近下割线的斜率<br>导数的定义<br>$$<br>f^′(x_0) &#x3D; \lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}} &#x3D; \lim_{\Delta x \to 0}{\frac {f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$<br>$$其中{\frac {f(x_0+\Delta x)-f(x_0)}{\Delta x}}表示差商$$<br>$$<br>f^′&#x3D;{\frac {df}{dx}}&#x3D;{\frac {dy}{dx}}&#x3D;{\frac {d}{dx}}f&#x3D;{\frac {d}{dx}}y<br>$$</p><h3 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h3><blockquote><p>$函数求导f(x)&#x3D;{\frac {1}{x}}$<br>$${\frac {\Delta y}{\Delta x}}&#x3D;{\frac {\frac {1}{x_0+\Delta x}+\frac {1}{x_0}}{\Delta x}}&#x3D;{\frac {1}{\Delta y}}({\frac {x_0-x_0-\Delta x}{(x_0+\Delta x)x_0}})&#x3D;{\frac {-\Delta x}{(x_0+\Delta x)x_0}}$$<br>取极限$x_0 \to 0$，可得<br>$$\lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}} &#x3D; {\frac {-1}{x_0^2}}$$  </p></blockquote><h3 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h3><blockquote><p>$函数求导f(x)&#x3D;x^n$<br>$${\frac {\Delta f}{\Delta x}} &#x3D; {\frac {(x_0+\Delta x)^n-x_0^n}{\Delta x}}&#x3D;{\frac {1}{\Delta x}}(x_0^2+nx_0^{n-1}\Delta x+O(\Delta x)^2-x_0^n)&#x3D;(nx_n^{n-1}+O(\Delta x))$$<br>其中$O(\Delta x)^2$<br>取极限$x_0 \to 0$，可得<br>$$\lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}}&#x3D;nx_0^{n-1}$$  </p></blockquote><ul><li><h3 id="物理角度"><a href="#物理角度" class="headerlink" title="物理角度"></a>物理角度</h3></li></ul><p>导数在物理表现为变化率: $$\lim_{\Delta x \to 0}{\frac {\Delta y}{\Delta x}}&#x3D;{\frac {dy}{dx}}$$</p><ul><li>${\frac {\Delta y}{\Delta x}}$ 表示的是一种平均值  </li><li>${\frac {dy}{dx}}$ 表示的是一种瞬时值  </li><li>随着$\Delta x \to 0$，平均值将趋近于瞬时值</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>当q表示电荷时， ${\frac {dq}{dt}}$ 表示瞬时电流<br>当s表示路程时， ${\frac {ds}{dt}}$ 表示瞬时速度<br>瞬时变化率还可用于测量灵敏度</p></blockquote><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="极限可以描述变化的趋势，但不是所有趋势都可以用极限描述"><a href="#极限可以描述变化的趋势，但不是所有趋势都可以用极限描述" class="headerlink" title="极限可以描述变化的趋势，但不是所有趋势都可以用极限描述"></a>极限可以描述变化的趋势，但不是所有趋势都可以用极限描述</h3><blockquote><p>极限的两种情况  </p><ol><li>简单模式：直接带入值<br>$$\lim_{x \to 1}{\frac {1}{x}}&#x3D;1$$ </li><li>复杂模式：需要进行对消运算才能带入<br>$$\lim_{x \to 0}{\frac {x^2+x}{x}}&#x3D;\lim_{x \to 0}{x+1}&#x3D;1$$</li></ol></blockquote><h3 id="极限逼近的方向"><a href="#极限逼近的方向" class="headerlink" title="极限逼近的方向"></a>极限逼近的方向</h3><blockquote><ul><li>左极限：$\lim_{x \to x_0^-}{f(x)}$ 其中 $x&lt;x_0^-$   </li><li>右极限：$\lim_{x \to x_0^+}{f(x)}$ 其中 $x&gt;x_0^+$</li></ul></blockquote><h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><h3 id="函数-f-x-在点-x-0-处连续的定义"><a href="#函数-f-x-在点-x-0-处连续的定义" class="headerlink" title="函数$f(x)$在点$x_0$处连续的定义"></a>函数$f(x)$在点$x_0$处连续的定义</h3><p>$$<br>\lim_{x \to x_0}{f(x)}&#x3D;f(x_0)<br>$$</p><blockquote><p>满足定义的三个条件</p><ul><li>左右极限存在且相等 $\lim_{x\to x^-}{f(x)}&#x3D;\lim_{x\to x^+}{f(x)}$  </li><li>函数 $f(x)$ 在 $x_0$ 处有定义  </li><li>函数值 $f(x_0)$ 与极限值 $\lim_{x\to x_0}{f(x)}$ 相等</li></ul></blockquote><h3 id="四种间断"><a href="#四种间断" class="headerlink" title="四种间断"></a>四种间断</h3><ol><li>跳跃间断：左右极限存在且不相等</li><li>可去间断：左右极限存在且相等，但不等于函数值<blockquote><p>举例：  $\frac {sin(x)}{x}$  </p><ul><li>$\lim_{x\to 0}{\frac {sin(x)}{x}} &#x3D; 1$</li><li>函数在 $x&#x3D;0$ 处无定义</li></ul></blockquote></li><li>无穷间断<blockquote><p>举例： $\frac {1}{x}$</p><ul><li>$\lim_{x\to o^+}{\frac {1}{x}}&#x3D;\infty$</li><li>$\lim_{x\to 0^-}{\frac {1}{x}}&#x3D;-\infty$</li><li>奇函数 $\frac {1}{x}$ 求导后变成了偶函数</li></ul></blockquote></li><li>另类间断<blockquote><p>无穷间断：$sin(\frac {1}{x})$</p><ul><li>随着 $x\to 0$ 函数 $\lim_{x\to 0}{f(x)}$ 将剧烈震荡  </li><li>函数在 $x&#x3D;0$ 处不存在左极限与右极限</li></ul></blockquote></li></ol><h3 id="可导必连续"><a href="#可导必连续" class="headerlink" title="可导必连续"></a>可导必连续</h3><blockquote><p>证明<br>$$\lim_{x\to x_0}{f(x)}-f(x_0) &#x3D; \lim_{x\to 0}{\frac {f(x)-f(x_0)}{x-x_0}}(x-x_0)$$<br>$$&#x3D;\lim_{x\to x_0}{f^′(x)(x-x_0)}$$<br>$$&#x3D;f^′(x) \times 0$$<br>$$&#x3D;0$$<br>满足函数 $f(x)$ 在 $x_0$ 处连续的定义<br>$$\lim_{x\to x_0}{f(x)}&#x3D;f(x_0)$$</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UNITI-1-微分&quot;&gt;&lt;a href=&quot;#UNITI-1-微分&quot; class=&quot;headerlink&quot; title=&quot;UNITI_1 微分&quot;&gt;&lt;/a&gt;UNITI_1 微分&lt;/h1&gt;&lt;h2 id=&quot;导数&quot;&gt;&lt;a href=&quot;#导数&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="微积分" scheme="http://example.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>算法基础</title>
    <link href="http://example.com/2023/01/26/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/01/26/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</id>
    <published>2023-01-26T11:11:17.000Z</published>
    <updated>2023-01-29T05:48:44.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h3 id="快速排序——分治"><a href="#快速排序——分治" class="headerlink" title="快速排序——分治"></a>快速排序——分治</h3><ol><li><p>确定分治点：q[l]，q[(l+r)&#x2F;2]，q[r]，随机</p></li><li><p>调整区间：使第一个区间所有数小于等于 x，第二个区间所有数大于 x（_难点_）</p></li><li><p>暴力做法：</p><ol><li>开数组 a[]，b[]</li><li>对于 q[l~r]，小于 x 的数存入 a，大于等于 x 的数存入 b</li><li>然后递归排序，将 a，b 内的数依次放入 q 中</li></ol></li><li><p>双指针做法：</p><ol><li>定义指针 i，j</li><li>在 q[l~r]内，i 向右走，j 向左走，如果 i 指向的数大于等于 x，i 停下，如果 j 指向的数小于等于 x，j 停下，当 i，j 都停下时，交换 i，j 指向的数，继续执行，直到 i，j 相遇</li><li>当 i，j 相遇后对 q[l，j]，q[i，r]进行递归</li></ol></li><li><p>递归：递归处理左右两端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> x=q[l],i=l<span class="number">-1</span>,j=r+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">do</span> i++ <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">    <span class="keyword">do</span> j-- <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//当x=q[l]时，如下写</span></span><br><span class="line">  <span class="built_in">quick_sort</span>(q,l,j);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br><span class="line">  <span class="comment">//当x=q[r]时</span></span><br><span class="line">  <span class="built_in">quick_sort</span>(q,l,i<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,i,r);</span><br><span class="line">  <span class="comment">//否则会出现边界问题</span></span><br><span class="line">  <span class="comment">//例如q[]=&#123;1,2&#125;</span></span><br><span class="line">  <span class="comment">//x=q[l]=1</span></span><br><span class="line">  <span class="comment">//quick_sort(q,l,i-1)=quick_sort(q,0,-1)</span></span><br><span class="line">  <span class="comment">//x=q[r]=2</span></span><br><span class="line">  <span class="comment">//quick_sort(q,j+1,r)=quick_sort(q,2,1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="归并排序——分治"><a href="#归并排序——分治" class="headerlink" title="归并排序——分治"></a>归并排序——分治</h3><ol><li><p>确定分治点 mid&#x3D;(l+r)&#x2F;2</p></li><li><p>递归排序 left，right</p></li><li><p>归并——合而为一（_难点_）</p><ol><li>对于排序好的序列 left，right，取两个指针分别指向头部，并用 res 存储归并后的序列</li><li>对两个指针所指向的数进行对比，将小的放入 res 中，并使指针+1，直到某一个数组为空，再将另一个数组接至 res 后面</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> q=[N],tmp[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> mid=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,l,mid);</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">  <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)</span><br><span class="line">    <span class="keyword">if</span>(q[i]&lt;=q[j])tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];</span><br><span class="line">  <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++)q[i]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><blockquote><p>二分的本质不是单调性，有单调性一定可以二分，能二分不一定有单调性</p></blockquote><ol><li>整数二分</li></ol><p>在区间 q[l~r]中定义了某种性质，性质使区间一分为二,红色区间不满足，绿色区间满足</p><ol><li><p>二分出红色边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l+r+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么 mid&#x3D;(l+r+1) &gt;&gt; 1;?<br>  当 l&#x3D;r-1 时，(l+r)&gt;&gt;1&#x3D;l，如果 check&#x3D;true 的话 l&#x3D;mid&#x3D;l，便会进入死循环</p></blockquote></li><li><p>二分出绿色边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;headerlink&quot; title=&quot;基础算法&quot;&gt;&lt;/a&gt;基础算法&lt;/h1&gt;&lt;h3 id=&quot;快速排序——分治&quot;&gt;&lt;a href=&quot;#快速排序——分治&quot; class=&quot;headerlink&quot; title=&quot;快</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
</feed>
