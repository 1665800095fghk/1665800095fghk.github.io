<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fghk的博客</title>
  
  <subtitle>热衷折腾的普通宅男</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-28T10:23:55.102Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fghk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue速通</title>
    <link href="http://example.com/2023/01/28/Vue%E9%80%9F%E9%80%9A/"/>
    <id>http://example.com/2023/01/28/Vue%E9%80%9F%E9%80%9A/</id>
    <published>2023-01-28T10:23:27.000Z</published>
    <updated>2023-01-28T10:23:55.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><h3 id="Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。"><a href="#Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。" class="headerlink" title="Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。"></a>Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建，并提供声明式，组件化的编程模型，帮助我们有效的构建用户界面。</h3><h3 id="下面是一个基本示例"><a href="#下面是一个基本示例" class="headerlink" title="下面是一个基本示例"></a>下面是一个基本示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面提供了一个按钮，点击按钮会使按钮上数字增加"><a href="#页面提供了一个按钮，点击按钮会使按钮上数字增加" class="headerlink" title="页面提供了一个按钮，点击按钮会使按钮上数字增加"></a>页面提供了一个按钮，点击按钮会使按钮上数字增加</h3><h3 id="Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。"><a href="#Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。" class="headerlink" title="Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。"></a>Vue是一个渐进式框架，拥有自己的生态，涵盖了大部分前端开发的需求。</h3><h3 id="不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue："><a href="#不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue：" class="headerlink" title="不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue："></a>不同开发者对Vue的需求各有不同，Vue可以被逐步集成，开发者可以根据使用场景，以不同方式使用Vue：</h3><ul><li>无需构建步骤，渐进式增强静态的Html</li><li>在任何页面中作为Web Components嵌入</li><li>单页面应用(SPA)</li><li>全栈&#x2F;服务端渲染(SSR)</li><li>Jamstack&#x2F;静态站点生成(SSG)</li><li>开发桌面端，移动端，WebGL，甚至是终端中的界面</li></ul><h3 id="单文本组件"><a href="#单文本组件" class="headerlink" title="单文本组件"></a>单文本组件</h3><h4 id="Vue可以使用-vue文件，将html-css-javascript封装进一个文件内"><a href="#Vue可以使用-vue文件，将html-css-javascript封装进一个文件内" class="headerlink" title="Vue可以使用.vue文件，将html,css,javascript封装进一个文件内"></a>Vue可以使用.vue文件，将html,css,javascript封装进一个文件内</h4><h4 id="上面的示例可以改为"><a href="#上面的示例可以改为" class="headerlink" title="上面的示例可以改为"></a>上面的示例可以改为</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个Vue项目"><a href="#创建一个Vue项目" class="headerlink" title="创建一个Vue项目"></a>创建一个Vue项目</h2><h3 id="对于Vue来说可以使用Vite来构建项目"><a href="#对于Vue来说可以使用Vite来构建项目" class="headerlink" title="对于Vue来说可以使用Vite来构建项目"></a>对于Vue来说可以使用Vite来构建项目</h3><h3 id="可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目"><a href="#可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目" class="headerlink" title="可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目"></a>可以使用下面的命令中的任意一个来使用Vite构建一个Vue项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识Vue&quot;&gt;&lt;a href=&quot;#初识Vue&quot; class=&quot;headerlink&quot; title=&quot;初识Vue&quot;&gt;&lt;/a&gt;初识Vue&lt;/h2&gt;&lt;h3 id=&quot;Vue是一款用于构建用户界面的JavaScript框架，基于标准Html、Css和JavaScript构建</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vite" scheme="http://example.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>数据结构_1</title>
    <link href="http://example.com/2023/01/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"/>
    <id>http://example.com/2023/01/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</id>
    <published>2023-01-27T07:02:51.000Z</published>
    <updated>2023-01-27T13:21:58.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h5 id="数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据"><a href="#数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据" class="headerlink" title="数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据"></a>数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据</h5><ul><li><h5 id="线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向"><a href="#线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向" class="headerlink" title="线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向"></a>线性数据结构排成像线一样的数据结构，意味着它只有前后两个方向</h5></li><li><h5 id="连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦"><a href="#连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦" class="headerlink" title="连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦"></a>连续空间使得数据可以随机访问，使得访问数组中某个元素非常方便，但在修改（删除，插入）元素时，操作会变得麻烦</h5></li></ul><h3 id="首先写出数据结构的基础类"><a href="#首先写出数据结构的基础类" class="headerlink" title="首先写出数据结构的基础类"></a>首先写出数据结构的基础类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FghkArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 当前使用了的容量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 存储的数据</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[];</span><br><span class="line">  <span class="comment">// FghkArray构造函数，传入参数为长度或传入数组</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">params?: <span class="built_in">number</span> | T[]</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(params)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = params;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = params.<span class="property">length</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(params ?? <span class="number">10</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成几个基础方法的编写"><a href="#完成几个基础方法的编写" class="headerlink" title="完成几个基础方法的编写"></a>完成几个基础方法的编写</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组中的元素个数</span></span><br><span class="line"><span class="title function_">getSize</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取数组容量</span></span><br><span class="line"><span class="title function_">getCapacity</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="title function_">isEmpty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素方法编写"><a href="#插入元素方法编写" class="headerlink" title="插入元素方法编写"></a>插入元素方法编写</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在index位置插入一个元素e</span></span><br><span class="line"><span class="title function_">add</span>(<span class="params">index: <span class="built_in">number</span>, e: T</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;添加元素错误，index范围出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩容</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[i+<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[index] = e;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中需要考量的是对于数组已满时，需要对数组扩容<br>所以我们在类中写一个重新分配大小的函数  </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resize重新分配空间大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">resize</span>(<span class="attr">newCapacity</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">newData</span>: T[]= <span class="keyword">new</span> <span class="title class_">Array</span>(newCapacity);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++)&#123;</span><br><span class="line">    newData[i] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span> = newData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="然后利用之前写好的add函数，添加一些其他的基础函数"><a href="#然后利用之前写好的add函数，添加一些其他的基础函数" class="headerlink" title="然后利用之前写好的add函数，添加一些其他的基础函数"></a>然后利用之前写好的add函数，添加一些其他的基础函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想数组头添加元素，返回长度</span></span><br><span class="line"><span class="title function_">unshift</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">add</span>(<span class="number">0</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getSize</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向末尾添加一个元素</span></span><br><span class="line"><span class="title function_">push</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">size</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getSize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接下来我们写删除数组元素"><a href="#接下来我们写删除数组元素" class="headerlink" title="接下来我们写删除数组元素"></a>接下来我们写删除数组元素</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除index位置的元素，返回删除的元素</span></span><br><span class="line"><span class="title function_">remove</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;删除错误，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: T = <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = index + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[i-<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>--;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩容</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当前大小只有总容量的四分之一，且总容量的二分之一不为0时缩小数组一半容量</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">size</span> === <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">2</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">resize</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="和之前插入元素一样，基于remove函数添加一些其他函数"><a href="#和之前插入元素一样，基于remove函数添加一些其他函数" class="headerlink" title="和之前插入元素一样，基于remove函数添加一些其他函数"></a>和之前插入元素一样，基于remove函数添加一些其他函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除元素e</span></span><br><span class="line"><span class="title function_">removeElement</span>(<span class="attr">e</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(e);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">remove</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个元素，返回元素值</span></span><br><span class="line"><span class="title function_">shift</span>(): T&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个元素，返回元素值</span></span><br><span class="line"><span class="title function_">pop</span>(): T&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一些对数组进行查询的方法"><a href="#编写一些对数组进行查询的方法" class="headerlink" title="编写一些对数组进行查询的方法"></a>编写一些对数组进行查询的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找是否有元素e</span></span><br><span class="line"><span class="title function_">contains</span>(<span class="attr">e</span>: T): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isEqual</span>(<span class="variable language_">this</span>.<span class="property">data</span>[i], e)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给定元素e在数组中的第一个索引，不存在返回-1</span></span><br><span class="line"><span class="title function_">indexOf</span>(<span class="attr">e</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isEqual</span>(<span class="variable language_">this</span>.<span class="property">data</span>[i], e)) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取index位置的元素</span></span><br><span class="line"><span class="title function_">get</span>(<span class="attr">index</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;获取元素出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFirst</span>(): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getLast</span>(): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[<span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写一些对数组元素进行更改的方法"><a href="#编写一些对数组元素进行更改的方法" class="headerlink" title="编写一些对数组元素进行更改的方法"></a>编写一些对数组元素进行更改的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置索引处元素为e</span></span><br><span class="line"><span class="title function_">set</span>(<span class="attr">index</span>: <span class="built_in">number</span>, <span class="attr">e</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;设置元素出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[index] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="title function_">swap</span>(<span class="attr">i</span>: <span class="built_in">number</span>, <span class="attr">j</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; <span class="variable language_">this</span>.<span class="property">size</span> || j &lt; <span class="number">0</span> || j &gt; <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;交换出错，索引取值出错&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">tmp</span>: T = <span class="variable language_">this</span>.<span class="property">data</span>[i];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[i] = <span class="variable language_">this</span>.<span class="property">data</span>[j];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">data</span>[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写将数组内元素组合成字符串返回的方法"><a href="#编写将数组内元素组合成字符串返回的方法" class="headerlink" title="编写将数组内元素组合成字符串返回的方法"></a>编写将数组内元素组合成字符串返回的方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line"><span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>: <span class="built_in">string</span> = <span class="string">`\nFghkArray: size=<span class="subst">$&#123;<span class="variable language_">this</span>.size&#125;</span>, capacity=<span class="subst">$&#123;<span class="variable language_">this</span>.data.length&#125;</span>`</span>;</span><br><span class="line">  res += <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">size</span>; i++) &#123;</span><br><span class="line">    res += <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.data[i]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span>(i !== <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      res += <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res += <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h5 id=&quot;数组是一种线性的数据结构，利用一组连续的空间，存储相同类型的数据&quot;&gt;&lt;a href=&quot;#数组是一种线性的数据结构，利用一组连续的空</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>微积分_1</title>
    <link href="http://example.com/2023/01/26/%E5%BE%AE%E7%A7%AF%E5%88%86-1/"/>
    <id>http://example.com/2023/01/26/%E5%BE%AE%E7%A7%AF%E5%88%86-1/</id>
    <published>2023-01-26T13:37:10.000Z</published>
    <updated>2023-01-28T06:10:39.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNITI-1-微分"><a href="#UNITI-1-微分" class="headerlink" title="UNITI_1 微分"></a>UNITI_1 微分</h1><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><ul><li><h3 id="几何角度"><a href="#几何角度" class="headerlink" title="几何角度"></a>几何角度</h3></li></ul><p>某曲线函数上一点P，坐标为$(x_0,y_0)$<br>$x_0$沿x轴移动距离$\Delta x$，其对应点为Q<br>定义割线为过点P到点Q的直线<br>随着点Q逐渐趋近于点P，割线将逐渐趋近于点P的切线<br>导数的几何意义为切线的斜率，即两点逼近下割线的斜率<br>导数的定义<br>$$<br>f^′(x_0) &#x3D; \lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}} &#x3D; \lim_{\Delta x \to 0}{\frac {f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$<br>$$其中{\frac {f(x_0+\Delta x)-f(x_0)}{\Delta x}}表示差商$$<br>$$<br>f^′&#x3D;{\frac {df}{dx}}&#x3D;{\frac {dy}{dx}}&#x3D;{\frac {d}{dx}}f&#x3D;{\frac {d}{dx}}y<br>$$</p><h3 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h3><blockquote><p>$函数求导f(x)&#x3D;{\frac {1}{x}}$<br>$${\frac {\Delta y}{\Delta x}}&#x3D;{\frac {\frac {1}{x_0+\Delta x}+\frac {1}{x_0}}{\Delta x}}&#x3D;{\frac {1}{\Delta y}}({\frac {x_0-x_0-\Delta x}{(x_0+\Delta x)x_0}})&#x3D;{\frac {-\Delta x}{(x_0+\Delta x)x_0}}$$<br>取极限$x_0 \to 0$，可得<br>$$\lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}} &#x3D; {\frac {-1}{x_0^2}}$$  </p></blockquote><h3 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h3><blockquote><p>$函数求导f(x)&#x3D;x^n$<br>$${\frac {\Delta f}{\Delta x}} &#x3D; {\frac {(x_0+\Delta x)^n-x_0^n}{\Delta x}}&#x3D;{\frac {1}{\Delta x}}(x_0^2+nx_0^{n-1}\Delta x+O(\Delta x)^2-x_0^n)&#x3D;(nx_n^{n-1}+O(\Delta x))$$<br>其中$O(\Delta x)^2$<br>取极限$x_0 \to 0$，可得<br>$$\lim_{\Delta x \to 0}{\frac {\Delta f}{\Delta x}}&#x3D;nx_0^{n-1}$$  </p></blockquote><ul><li><h3 id="物理角度"><a href="#物理角度" class="headerlink" title="物理角度"></a>物理角度</h3></li></ul><blockquote><p>变化率: $$\lim_{\Delta x \to 0}{\frac {\Delta y}{\Delta x}}&#x3D;{\frac {dy}{dx}}$$</p><ul><li>${\frac {\Delta y}{\Delta x}}$表示的是一种平均值  </li><li>${\frac {dy}{dx}}$表示的是一种瞬时值  </li><li>随着$\Delta x \to 0$，平均值将趋近于瞬时值</li></ul></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><blockquote><p>当q表示电荷时，${\frac {dq}{dt}}$表示瞬时电流<br>当s表示路程时，${\frac {ds}{dt}}$表示瞬时速度<br>瞬时变化率还可用于测量灵敏度</p></blockquote><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="极限可以描述变化的趋势，但不是所有趋势都可以用极限描述"><a href="#极限可以描述变化的趋势，但不是所有趋势都可以用极限描述" class="headerlink" title="极限可以描述变化的趋势，但不是所有趋势都可以用极限描述"></a>极限可以描述变化的趋势，但不是所有趋势都可以用极限描述</h3><blockquote><p>极限的两种情况  </p><ol><li>简单模式：直接带入值<br>$$\lim_{x \to 1}{\frac {1}{x}}&#x3D;1$$ </li><li>复杂模式：需要进行对消运算才能带入<br>$$\lim_{x \to 0}{\frac {x^2+x}{x}}&#x3D;\lim_{x \to 0}{x+1}&#x3D;1$$</li></ol></blockquote><h3 id="极限逼近的方向"><a href="#极限逼近的方向" class="headerlink" title="极限逼近的方向"></a>极限逼近的方向</h3><blockquote><ul><li>左极限：$\lim_{x \to x_0^-}{f(x)}$其中$x&lt;x_0^-$  </li><li>右极限：$\lim_{x \to x_0^+}{f(x)}$其中$x&gt;x_0^+$</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UNITI-1-微分&quot;&gt;&lt;a href=&quot;#UNITI-1-微分&quot; class=&quot;headerlink&quot; title=&quot;UNITI_1 微分&quot;&gt;&lt;/a&gt;UNITI_1 微分&lt;/h1&gt;&lt;h2 id=&quot;导数&quot;&gt;&lt;a href=&quot;#导数&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="微积分" scheme="http://example.com/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>算法基础</title>
    <link href="http://example.com/2023/01/26/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2023/01/26/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</id>
    <published>2023-01-26T11:11:17.000Z</published>
    <updated>2023-01-26T13:33:59.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h3 id="快速排序——分治"><a href="#快速排序——分治" class="headerlink" title="快速排序——分治"></a>快速排序——分治</h3><ol><li><p>确定分治点：q[l]，q[(l+r)&#x2F;2]，q[r]，随机</p></li><li><p>调整区间：使第一个区间所有数小于等于 x，第二个区间所有数大于 x（_难点_）</p></li><li><p>暴力做法：</p><ol><li>开数组 a[]，b[]</li><li>对于 q[l~r]，小于 x 的数存入 a，大于等于 x 的数存入 b</li><li>然后递归排序，将 a，b 内的数依次放入 q 中</li></ol></li><li><p>双指针做法：</p><ol><li>定义指针 i，j</li><li>在 q[l~r]内，i 向右走，j 向左走，如果 i 指向的数大于等于 x，i 停下，如果 j 指向的数小于等于 x，j 停下，当 i，j 都停下时，交换 i，j 指向的数，继续执行，直到 i，j 相遇</li><li>当 i，j 相遇后对 q[l，j]，q[i，r]进行递归</li></ol></li><li><p>递归：递归处理左右两端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> x=q[l],i=l<span class="number">-1</span>,j=r+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="keyword">do</span> i++ <span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">    <span class="keyword">do</span> j-- <span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">    <span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//当x=q[l]时，如下写</span></span><br><span class="line">  <span class="built_in">quick_sort</span>(q,l,j);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br><span class="line">  <span class="comment">//当x=q[r]时</span></span><br><span class="line">  <span class="built_in">quick_sort</span>(q,l,i<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,i,r);</span><br><span class="line">  <span class="comment">//否则会出现边界问题</span></span><br><span class="line">  <span class="comment">//例如q[]=&#123;1,2&#125;</span></span><br><span class="line">  <span class="comment">//x=q[l]=1</span></span><br><span class="line">  <span class="comment">//quick_sort(q,l,i-1)=quick_sort(q,0,-1)</span></span><br><span class="line">  <span class="comment">//x=q[r]=2</span></span><br><span class="line">  <span class="comment">//quick_sort(q,j+1,r)=quick_sort(q,2,1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">  <span class="built_in">quick_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="归并排序——分治"><a href="#归并排序——分治" class="headerlink" title="归并排序——分治"></a>归并排序——分治</h3><ol><li><p>确定分治点 mid&#x3D;(l+r)&#x2F;2</p></li><li><p>递归排序 left，right</p></li><li><p>归并——合而为一（_难点_）</p><ol><li>对于排序好的序列 left，right，取两个指针分别指向头部，并用 res 存储归并后的序列</li><li>对两个指针所指向的数进行对比，将小的放入 res 中，并使指针+1，直到某一个数组为空，再将另一个数组接至 res 后面</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> q=[N],tmp[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">  <span class="type">int</span> mid=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,l,mid);</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">  <span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)</span><br><span class="line">    <span class="keyword">if</span>(q[i]&lt;=q[j])tmp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=mid)tmp[k++]=q[i++];</span><br><span class="line">  <span class="keyword">while</span>(j&lt;=r)tmp[k++]=q[j++];</span><br><span class="line">  <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++)q[i]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">  <span class="built_in">merge_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><blockquote><p>二分的本质不是单调性，有单调性一定可以二分，能二分不一定有单调性</p></blockquote><ol><li>整数二分</li></ol><p>在区间 q[l~r]中定义了某种性质，性质使区间一分为二,红色区间不满足，绿色区间满足</p><ol><li><p>二分出红色边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l+r+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">    <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么 mid&#x3D;(l+r+1) &gt;&gt; 1;?<br>  当 l&#x3D;r-1 时，(l+r)&gt;&gt;1&#x3D;l，如果 check&#x3D;true 的话 l&#x3D;mid&#x3D;l，便会进入死循环</p></blockquote></li><li><p>二分出绿色边界</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础算法&quot;&gt;&lt;a href=&quot;#基础算法&quot; class=&quot;headerlink&quot; title=&quot;基础算法&quot;&gt;&lt;/a&gt;基础算法&lt;/h1&gt;&lt;h3 id=&quot;快速排序——分治&quot;&gt;&lt;a href=&quot;#快速排序——分治&quot; class=&quot;headerlink&quot; title=&quot;快</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
</feed>
